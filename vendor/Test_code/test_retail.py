# app.py - The main executable file
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from selenium.webdriver.support.ui import Select
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from time import sleep
from Test_locators import locators
from Test_data import data
import pytest


class Test_Logimax:
    @pytest.fixture
    

    def booting_function(self):
       self.driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()))
       self.driver.get(data.Logi_Data().url)
       self.driver.maximize_window()
       self.driver.implicitly_wait(5)
  
  
    def test_vendor_registration(self,booting_function):   
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().username_inputBox).send_keys(data.Logi_Data().username)
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().password_inputBox).send_keys(data.Logi_Data().password)
        sleep(8)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().signButton).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().side_bar).click()
        sleep(8)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().purchase_module).click()
        sleep(5)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().Vendor_Registration_tab).click()
        sleep(6)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Add_karigar).click()
        #self.driver.switch_to.alert.accept() 
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().status_no).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().status_yes).click()
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().first_name).send_keys(data.Logi_Data().name)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().last_name).send_keys(data.Logi_Data().Last_name)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().karigar_mobile).send_keys(data.Logi_Data().mobile_NO)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().karigar_mail_id).send_keys(data.Logi_Data().mail_id)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().karigar_phone_NO).send_keys(data.Logi_Data().phone_no)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().username_karigar).send_keys(data.Logi_Data().user_username)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().password_karigar).send_keys(data.Logi_Data().user_password)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Address1).send_keys(data.Logi_Data().fist_Address)
        sleep(4)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Address2).send_keys(data.Logi_Data().second_Address)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Address3).send_keys(data.Logi_Data().Third_Address)
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().select_city).click()
        sleep(5)
        city = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().city_text_box)
        city.send_keys(data.Logi_Data().Area_Text)
        city.send_keys(Keys.RETURN)   
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().pincode).send_keys(data.Logi_Data().city_pincode)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save).click()
        assert self.driver.title == 'Logimax Technology | Admin'
        entry = ("SUCCESS : The vendor registration  added successfully first_name : {a},last_name: {b},karigar_mobile: {c}, karigar_mail_id:{d},karigar_phone_NO:{e},username_karigar{f},password_karigar{g},Address1{h}". format(a=data.Logi_Data.name, b=data.Logi_Data.Last_name, c=data.Logi_Data.mobile_NO, d=data.Logi_Data.mail_id, e=data.Logi_Data.phone_no, f=data.Logi_Data.user_username, g=data.Logi_Data.user_password, h=data.Logi_Data.fist_Address))
        print(entry)
        
        
        
    def test_contract_price(self,booting_function):   
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().username_inputBox).send_keys(data.Logi_Data().username)
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().password_inputBox).send_keys(data.Logi_Data().password)
        sleep(8)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().signButton).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().side_bar).click()
        sleep(8)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().purchase_module).click()
        sleep(5)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().Vendor_Registration_tab).click()
        sleep(6)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_edit).click()    
        sleep(4)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().contract_price).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().add_wastage).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().category).click()
        sleep(5)
        category = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().category_list)
        category.send_keys('GOLD RING & COIN')
        category.send_keys(Keys.RETURN)   
        sleep(5)     
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().purity).click()
        sleep(10)
        add_purity = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().purity_list)
        add_purity.send_keys('75.0000')
        add_purity.send_keys(Keys.RETURN)   
        sleep(5)     
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().product).click()
        sleep(5)
        product = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().product_list)
        product.send_keys('RING & COIN')
        product.send_keys(Keys.RETURN)   
        sleep(5)      
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().design).click()
        sleep(5)
        design = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().design_list)
        design.send_keys('ARAM')
        design.send_keys(Keys.RETURN)   
        sleep(5)      
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().sub_design).click()
        sleep(5)
        sub_design = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().sub_design_list)
        sub_design.send_keys('SOLID CHAIN')
        sub_design.send_keys(Keys.RETURN)   
        sleep(5)  
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_calculation).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_cal_type_list).click()
        sleep(5)   
        Number ='13' 
        value = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().Touch)
        value.send_keys(Number)
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().calculation).click()
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().cal_type).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().cal_type_list).click()
        sleep(5) 
        Number_1 = '12'
        va_value = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().va)
        va_value.send_keys(Number_1)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().MC_type).click()
        sleep(5) 
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().mc_type_lists).click()
        sleep(5)
        Number2 = '15'
        Mc_value = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().MC)
        Mc_value.send_keys(Number2)
        sleep(4)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().charge).click()
        sleep(5)
        charge_list =self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().charge_Name)
        charge = Select(charge_list)
        charge.select_by_value('2')
        sleep(5)
        calc_list =self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().calc_type)
        calc = Select(calc_list)
        calc.select_by_value('2')
        sleep(5)
        Number3 = '100'
        value3 = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().charge_value)
        value3.send_keys(Number3)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_charge).click()
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_page).click()
        assert self.driver.title == 'Logimax Technology | Admin'
        entry = ("SUCCESS : Contract price added successfully category_list : {a},purity_list: {b},product_list: {c},design_list :{d},sub_design_list:{e}". format(a='GOLD RING & COIN', b='75.0000', c='RING & COIN', d='ARAM', e='SOLID CHAIN'))
        print(entry)
        
    
    def test_stone_detail(self,booting_function):   
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().username_inputBox).send_keys(data.Logi_Data().username)
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().password_inputBox).send_keys(data.Logi_Data().password)
        sleep(8)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().signButton).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().side_bar).click()
        sleep(8)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().purchase_module).click()
        sleep(5)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().Vendor_Registration_tab).click()
        sleep(6)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_edit).click()   
        sleep(6)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().stone_page).click()  
        sleep(7)   
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().add_stone).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().stone_type).click()
        sleep(5)
        stone_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        stone_list.send_keys('Diamond')
        stone_list.send_keys(Keys.RETURN)  
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().stone_name).click()
        sleep(5)
        stone_namelist = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        stone_namelist.send_keys('Diamond')
        stone_namelist.send_keys(Keys.RETURN)  
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().uom).click()
        sleep(5)
        U_O_M = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        U_O_M.send_keys('gm')
        U_O_M.send_keys(Keys.RETURN)    
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().calculation_type).click()
        sleep(5)
        calculation_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        calculation_list.send_keys('pcs')
        calculation_list.send_keys(Keys.RETURN) 
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().code).click()
        sleep(5)
        code_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        code_list.send_keys('GOOD QUALITY')
        code_list.send_keys(Keys.RETURN) 
        sleep(5)
        number4 = '10'
        From_no = self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().From)
        From_no.send_keys(number4)
        sleep(5)
        number5 = '12'
        To_No = self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().To)
        To_No.send_keys(number5)
        sleep(5)
        number6 = '500'
        Rate = self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().Rate)
        Rate.send_keys(number6)
        sleep(3)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_stone_page).click() 
        assert self.driver.title == 'Logimax Technology | Admin'
        entry = ("SUCCESS : Stone detail added successfully stone_type : {a},stone_name : {b},uom : {c},calculation_type :{d},code :{e}". format(a='Diamond', b='Diamond', c='gm', d='pcs', e='GOOD QUALITY'))
        print(entry)
      
       
         
    def test_kyc_detail(self,booting_function):   
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().username_inputBox).send_keys(data.Logi_Data().username)
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().password_inputBox).send_keys(data.Logi_Data().password)
        sleep(8)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().signButton).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().side_bar).click()
        sleep(8)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().purchase_module).click()
        sleep(5)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().Vendor_Registration_tab).click()
        sleep(6)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_edit).click()
        sleep(20)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().kyc).click()
        sleep(10)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().add_bank).click()
        sleep(10)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().bank_name).send_keys(data.Logi_Data().Bank_Name)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().account_holder_name).send_keys(data.Logi_Data().account_holder_name)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().account_number).send_keys(data.Logi_Data().Account_no)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().ifsc_code).send_keys(data.Logi_Data().ifsc_no)
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().add_Kyc).click()
        sleep(4)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().proof_name).click()
        sleep(5)
        proof_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        proof_list.send_keys('COMPANY REG CERT')
        proof_list.send_keys(Keys.RETURN) 
        sleep(5)
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().ID_no).send_keys(data.Logi_Data().id_No)
        sleep(4)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_kyc).click()
        assert self.driver.title == 'Logimax Technology | Admin'
        entered = ("SUCCESS : KYC detail added successfully bank_name : {a},account_holder_name : {b},account_number : {c},ifsc_code :{d},proof_name :{e},ID_no : {f}". format(a=data.Logi_Data.Bank_Name, b=data.Logi_Data.account_holder_name, c=data.Logi_Data.Account_no, d=data.Logi_Data.ifsc_no, e='COMPANY REG CERT', f=data.Logi_Data.id_No))
        print(entered)
        
    def test_delete_detail(self,booting_function):   
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().username_inputBox).send_keys(data.Logi_Data().username)
        self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().password_inputBox).send_keys(data.Logi_Data().password)
        sleep(8)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().signButton).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().side_bar).click()
        sleep(8)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().purchase_module).click()
        sleep(5)
        self.driver.find_element(by=By.PARTIAL_LINK_TEXT,value=locators.Logi_Locators().Vendor_Registration_tab).click()
        sleep(6)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().delete).click()
        assert self.driver.title == 'Logimax Technology | Admin'
        print("SUCCESS : Karigar List deleted successfully")
        
        
        
            
        
        
        
        
        '''
        
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().add_stone).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().stone_type).click()
        sleep(5)
        stone_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        stone_list.send_keys('Diamond')
        stone_list.send_keys(Keys.RETURN)  
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().stone_name).click()
        sleep(5)
        stone_namelist = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        stone_namelist.send_keys('Diamond')
        stone_namelist.send_keys(Keys.RETURN)  
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().uom).click()
        sleep(5)
        U_O_M = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        U_O_M.send_keys('gm')
        U_O_M.send_keys(Keys.RETURN)    
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().calculation_type).click()
        sleep(5)
        calculation_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        calculation_list.send_keys('pcs')
        calculation_list.send_keys(Keys.RETURN) 
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().code).click()
        sleep(5)
        code_list = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().text_box)
        code_list.send_keys('GOOD QUALITY')
        code_list.send_keys(Keys.RETURN) 
        sleep(5)
        number4 = '10'
        From_no = self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().From)
        From_no.send_keys(number4)
        sleep(5)
        number5 = '12'
        To_No = self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().To)
        To_No.send_keys(number5)
        sleep(5)
        number6 = '500'
        Rate = self.driver.find_element(by=By.NAME,value=locators.Logi_Locators().Rate)
        Rate.send_keys(number6)
        sleep(3)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_stone_page).click()
        '''
        
        



'''     self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Add_karigar).click()
        #self.driver.switch_to.alert.accept() 
        
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().status_no).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().status_yes).click()
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().first_name).send_keys(data.Logi_Data().name)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().last_name).send_keys(data.Logi_Data().Last_name)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().karigar_mobile).send_keys(data.Logi_Data().mobile_NO)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().karigar_mail_id).send_keys(data.Logi_Data().mail_id)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().karigar_phone_NO).send_keys(data.Logi_Data().phone_no)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().username_karigar).send_keys(data.Logi_Data().user_username)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().password_karigar).send_keys(data.Logi_Data().user_password)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Address1).send_keys(data.Logi_Data().fist_Address)
        sleep(4)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Address2).send_keys(data.Logi_Data().second_Address)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().Address3).send_keys(data.Logi_Data().Third_Address)
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().select_city).click()
        sleep(5)
        city = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().city_text_box)
        city.send_keys(data.Logi_Data().Area_Text)
        city.send_keys(Keys.RETURN)   
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().pincode).send_keys(data.Logi_Data().city_pincode)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save).click()
        sleep(30)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().add_wastage).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().category).click()
        sleep(5)
        category = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().category_list)
        category.send_keys('GOLD RING & COIN')
        category.send_keys(Keys.RETURN)   
        sleep(5)     
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().purity).click()
        sleep(10)
        add_purity = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().purity_list)
        add_purity.send_keys('75.0000')
        add_purity.send_keys(Keys.RETURN)   
        sleep(5)     
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().product).click()
        sleep(5)
        product = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().product_list)
        product.send_keys('RING & COIN')
        product.send_keys(Keys.RETURN)   
        sleep(5)      
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().design).click()
        sleep(5)
        design = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().design_list)
        design.send_keys('ARAM')
        design.send_keys(Keys.RETURN)   
        sleep(5)      
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().sub_design).click()
        sleep(5)
        sub_design = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().sub_design_list)
        sub_design.send_keys('SOLID CHAIN')
        sub_design.send_keys(Keys.RETURN)   
        sleep(5)  
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_calculation).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().karigar_cal_type_list).click()
        sleep(5)   
        Number ='13' 
        value = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().Touch)
        value.send_keys(Number)
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().calculation).click()
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().cal_type).click()
        sleep(5)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().cal_type_list).click()
        sleep(5) 
        Number_1 = '12'
        va_value = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().va)
        va_value.send_keys(Number_1)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().MC_type).click()
        sleep(5) 
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().mc_type_lists).click()
        sleep(5)
        Number2 = '15'
        Mc_value = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().MC)
        Mc_value.send_keys(Number2)
        sleep(4)
        self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().charge).click()
        sleep(5)
        charge_list =self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().charge_Name)
        charge = Select(charge_list)
        charge.select_by_value('2')
        sleep(5)
        calc_list =self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().calc_type)
        calc = Select(calc_list)
        calc.select_by_value('2')
        sleep(5)
        Number3 = '100'
        value3 = self.driver.find_element(by=By.XPATH,value=locators.Logi_Locators().charge_value)
        value3.send_keys(Number3)
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_charge).click()
        sleep(5)
        self.driver.find_element(by=By.ID,value=locators.Logi_Locators().save_page).click()'''        
        
        
         
        
        
        
        
        
        
       